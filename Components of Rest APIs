### Building REST APIs

**REST** and **API** are acronyms for _Representational State Transfer_ and _Application Programming Interface_. 
**REST APIs** are integral to web application development and are becoming mainstays of all web development. 

Understanding what they are and how they work starts with understanding what these names, representational state transfer and application programming interface, actually mean. 
**According to MDN**, _Representational State Transfer_ or **REST** refers to 

> a group of software architecture design constraints that bring about efficient, reliable, and scalable systems. 

So **REST** isn't a specific technology, but rather _a data architecture and design methodology_ that 
- produces predictable and consistent outputs and behaviors by receiving a set of standard methods called **verbs** and returning standardized structured data, typically JSON or XML, called the _resource_. 
---

### Representational State Transfer
**Representational State Transfer** is a literal description of what's happening. 
> We transition between representations of states and these representations are transformed back and forth between the application and the server. 

### To make sense of this, consider a typical website. 
Each page comprises a single HTML document containing the content, any reference items like images, one or more style sheets describing how the document is presented in the browser, and some JavaScript manipulating the document or styles or both. 

When the visitor navigates from one page to another, 
- they send a URL, Universal Resource Locator, request to the server pointing at a web resource in the form of a specific HTML document. 
- The server responds by returning the document along with its adjoining files to the browser which replaces the previous content with all new content. 

**This works fine, but it's resource intensive.** 

> Each new page requires a completed HTML document and the document has to be written by a developer or generated by a content management system before it's downloaded and rendered in the browser. 

Now imagine instead of a website comprising individual documents generated and downloaded from the server, _we have a web application_. 
---

### Web Application
An application downloaded to the browser that runs in the browser and is populated with data from the web. 

- In this application, each page is a view representing the current state. 
- When the visitor loads the site for the first time, all the components that make up the application are downloaded including an HTML framework, referenced items, one or more style sheets, and some JavaScript. 
- The application then sends a URI or Universal Resource Identifier request for a web resource representing the next state of the application to be transferred, and uses the resulting data to build the current view. 
- When the visitor navigates from one view to another, the application sends a new URI request for the web resource representing the next state of the application which is transferred and used to add, modify, replace, or delete the previous data. 

The key is this **representational state** is _transferred as a data object, not the entire new set of files_ and **the application can update its data without rendering the whole new page**. 

This allows us to create so-called **single page applications** on the web and native apps for mobile devices and platforms that all use or consume the same REST resource. 

### Example of Single Page Application (SPA) in use
To give a practical example, when you visit LinkedIn on your computer and your smartphone, you use two different applications to access the same data from the same REST resource. 

All this back and forth is controlled through an application programming interface or API. 

> An API is a set of features and rules that exist inside a software program enabling interaction between the software and other items, such as other software or hardware. 

In the context of REST APIs, **the API is the collection of tools used to access and work with REST resources through your adverbs** including _get, pulls, put,_ and _delete_. 

**You can think of the REST resource as a _librarian_ and the API as the _language_ used to talk to them.** 

- Hi Data Attendant, please get me the 10 most recent articles on digital ethics. 
- Hi data attendant, please put this document to the library under the ABC category, and please delete this document from the library as it's no longer relevant.
---

### Universal Resource Identifier (URI)
A **Universal Resource Identifier**, is described as a _"compact sequence of characters "_ that identifies an abstract or physical resource" that "provides a simple and extensible means "for identifying a resource." 

- The URI is the most generic method for naming and locating a web resource. 

The official examples of URIs show you that _any sequence of characters that identifies a resource is considered a URI._ 
---

### Universal Resource Locator (URL)
The **URL**, or **Universal Resource Locator**, is a subset of the URI. 

The URL **not only identifies a resource**, _but also explains how to access that resource by providing an explicit method like_ 

- HTTP or 
- FTP. 

In other words, **all URLs are URIs**, _but not all URIs are URLs_. 
---

### Universal Resource Name (URN)
There's also another subset of URIs we rarely talk about, the **URN**, or **Universal Resource Name**. 

The **URN refers to both** 
- URIs under the URN scheme 
- and to any other URI with the properties of a name. 

**The classic explanation of the difference between a _URN_ and a _URL_** is to say 

> the URN is a unique name identifier, like the name of a person. 

There are many people named John in Atlanta, Georgia, but only one person name John Henderson III in Powder Springs. Refer to this person by their full name and location and anyone who knows them should know who you're talking about, even if that person not physically there and they don't know where they are at the moment. The URL provides their actual physical location.

For example, a Facebook profile could be referred to as a URN because it provides an exact location to a person's actual profile.

Finally, _a **URN** can also be a **URL**_, but doesn't have to be. 
===

So in conclusion, _a URL might also be a URN and both are URIs._ 

When we talk about REST APIs, we typically use the generic term URI to refer to how we access resources because within our code, we can use either URLs or URNs or a combination and URIs cover all options.
